export const MOCKS = {
  request_1:
    "Необходимо создать приложение для управления списком дел. Пользователь должен иметь возможность добавлять новые задачи, отмечать их как выполненные, редактировать текст и удалять ненужные элементы. Также требуется возможность фильтрации по статусу (все/активные/завершенные) и сохранение данных между сессиями.",
  request_2:
    "Необходимо реализовать систему уведомлений для веб-приложения. Пользователи должны получать push-уведомления о новых сообщениях, системных событиях и напоминаниях. Требуется возможность настройки типов уведомлений в личном кабинете, отображение истории уведомлений и их группировка по категориям. Уведомления должны поддерживать Rich Text форматирование и содержать действия (кнопки для быстрого ответа)",
  response_1:
    "**TL;DR:**  \nРеализовать простое приложение для управления задачами с возможностью добавления, отметки выполненных задач, редактирования текста, удаления элементов, фильтрации по статусам и сохранения данных.\n\n**TODO:**\n- Создать компонент TaskForm для создания новых задач и редактирования существующих.\n- Реализовать компонент TaskList для отображения списка задач с возможностью отметки выполнения, редактирования и удаления каждой отдельной задачи.\n- Разработать компонент FilterBar с переключателями для выбора фильтра (Все/Активные/Завершенные).\n- Написать reducers и actions для работы с задачами (создание, обновление статуса, удаление, изменение текста), используя Redux Toolkit.\n- Настроить хранение данных приложения в LocalStorage или IndexedDB для сохранения состояния между сессиями.\n\n**ВОПРОСЫ:**\n- Каким образом должна происходить синхронизация данных при работе пользователя на разных устройствах?\n- Нужно ли реализовать дополнительную авторизацию пользователей или будет достаточно локального хранения данных?\n- Какие дополнительные поля или метаданные должны быть у задачи помимо текста и статуса?",
  response_2:
    '**TL;DR:** Реализовать полнофункциональную систему уведомлений с настройками, историей, группировкой и поддержкой Rich Text.\n\n**TODO:**\n- Создать Redux slice для управления уведомлениями (state, actions, reducers).\n- Разработать компонент "Настройки уведомлений" с возможностью выбора типов уведомлений.\n- Реализовать API запросы на получение списка текущих уведомлений и историю уведомлений.\n- Создать компонент "Уведомление", поддерживающий Rich Text форматирование и кнопки действий.\n- Добавить логику группировки уведомлений по типам/событиям.\n- Отобразить уведомления в виде карточки с возможностью сворачивания/разворачивания подробностей.\n- Настроить хранение настроек пользователя и синхронизацию с сервером.\n  \n**ВОПРОСЫ:**\n- Какие типы уведомлений необходимо предусмотреть?\n- Каким образом будет реализована отправка push-уведомлений?\n- Нужно ли интегрировать внешний сервис для отправки push-уведомлений?',
};
